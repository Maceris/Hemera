# Hemera grammar

# Tokens

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
    | "H" | "I" | "J" | "K" | "L" | "M" | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
    | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
    | "c" | "d" | "e" | "f" | "g" | "h" | "i"
    | "j" | "k" | "l" | "m" | "n" | "o" | "p"
    | "q" | "r" | "s" | "t" | "u" | "v" | "w"
    | "x" | "y" | "z" ;

digit_decimal = "0" | digit_decimal_nonzero ;
digit_decimal_nonzero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit_hex = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
    | "a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" | "e" | "E" | "f" | "F" ;
digit_octal = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
digit_binary = "0" | "1" ;

identifier = letter , { letter | digit_decimal | "_" } ;

S = { " " | "\n" | "\t" | "\r" | "\f" | "\b" } ;

any_character = ? all characters ? ;
illegal_string_characters = "\x01" |"\x02" |"\x03" |"\x04" |"\x05"
    |"\x06" |"\x07" |"\x08" |"\x09" |"\x0b"
    |"\x0c" |"\x0d" |"\x0e" |"\x0f" |"\x10"
    |"\x11" |"\x12" |"\x13" |"\x14" |"\x15"
    |"\x16" |"\x17" |"\x18" |"\x19" |"\x1a"
    |"\x1b" |"\x1c" |"\x1d" |"\x1e" |"\x1f"
    |"\x7f" | "\n"
    ;

annotation = "@" , [ letter | digit_decimal | "_" ]+ ;
directive = "#" , [ letter | digit_decimal | "_" ]+ ;

comment_block = "/*" , { comment_block_body } , "*/" ;
comment_block_body = comment_block_body_not_nested
    | comment_block
    ;
comment_block_body_not_nested = { any_character - ( "*" | "/" ) }
    | ("/" , any_character - "*" , comment_block_body_not_nested)
    | ("*" , any_character - "/" , comment_block_body_not_nested)
    ;
comment_line = "//" , { any_character - "\n" } , "\n" ;

comment_any = comment_block | comment_line ;

literal_string = '"' , { any_character - ( "\" | '"' | illegal_string_characters ) | ( "\" , any_character - "n" ) } , '"' ;
literal_char = "'" , { any_character - ( "\" | "'" | illegal_string_characters ) | ("\" , any_character - ( "n" | illegal_string_characters ) ) } , "'" ;

literal_integer = integer_decimal
    | integer_hex
    | integer_binary
    | integer_octal
    ;

integer_decimal = digit_decimal_nonzero , { { "_" } , digit_decimal } ;
integer_hex = "0x" , digit_hex, { { "_" } , digit_hex } ;
integer_binary = "0b" , digit_binary, { { "_" } , digit_binary } ;
integer_octal = "0o" , digit_octal, { { "_" } , digit_octal } ;

literal_floating_point = ( "0" | integer_decimal ) , [ float_decimal ] , [ float_exponent ] ;
float_decimal = "." , integer_decimal ;
float_exponent = ( "e" | "E" ) , [ "-" ] , integer_decimal ;

pipe_reorder_identifier = "$" , integer_decimal ;

KEYWORD_alias = "alias" ;
KEYWORD_all = "all" ;
KEYWORD_as = "as" ;
KEYWORD_auto_cast = "auto_cast" ;
KEYWORD_bit_cast = "bit_cast" ;
KEYWORD_break = "break" ;
KEYWORD_case = "case" ;
KEYWORD_cast = "cast" ;
KEYWORD_context = "context" ;
KEYWORD_continue = "continue" ;
KEYWORD_defer = "defer" ;
KEYWORD_distinct = "distinct" ;
KEYWORD_else = "else" ;
KEYWORD_enum = "enum" ;
KEYWORD_false = "false" ;
KEYWORD_fn = "fn" ;
KEYWORD_for = "for" ;
KEYWORD_from = "from" ;
KEYWORD_if = "if" ;
KEYWORD_import = "import" ;
KEYWORD_in = "in" ;
KEYWORD_is_none = "is_none" ;
KEYWORD_is_some = "is_some" ;
KEYWORD_loop = "loop" ;
KEYWORD_match = "match" ;
KEYWORD_mut = "mut" ;
KEYWORD_null = "null" ;
KEYWORD_or_break = "or_break" ;
KEYWORD_or_continue = "or_continue" ;
KEYWORD_or_else = "or_else" ;
KEYWORD_or_return = "or_return" ;
KEYWORD_package = "package" ;
KEYWORD_return = "return" ;
KEYWORD_struct = "struct" ;
KEYWORD_switch = "switch" ;
KEYWORD_true = "true" ;
KEYWORD_union = "union" ;
KEYWORD_using = "using" ;
KEYWORD_void = "void" ;
KEYWORD_while = "while" ;
KEYWORD_with = "with" ;

OPERATOR_and = "&&" ;
OPERATOR_assign = "=" ;
OPERATOR_assign_add = "+=" ;
OPERATOR_assign_and = "&&=" ;
OPERATOR_assign_bitwise_and = "&=" ;
OPERATOR_assign_bitwise_or = "|=" ;
OPERATOR_assign_bitwise_xor = "~=" ;
OPERATOR_assign_div = "/=" ;
OPERATOR_assign_left_shift = "<<=" ;
OPERATOR_assign_mod = "%=" ;
OPERATOR_assign_mul = "*=" ;
OPERATOR_assign_or = "||=" ;
OPERATOR_assign_remainder = "%%=" ;
OPERATOR_assign_right_shift_arithmetic = ">>=" ;
OPERATOR_assign_right_shift_logical = ">>>=" ;
OPERATOR_assign_sub = "-=" ;
OPERATOR_bitwise_or = "|" ;
OPERATOR_bitwise_xor = "~" ;
OPERATOR_divide = "/" ;
OPERATOR_dereference = "^" ;
OPERATOR_equal = "==" ;
OPERATOR_greater_than_or_equal = ">=" ;
OPERATOR_left_shift = "<<" ;
OPERATOR_less_than_or_equal = "<=" ;
OPERATOR_minus = "-" ;
OPERATOR_modulus = "%" ;
OPERATOR_multiply = "*" ;
OPERATOR_not = "!" ;
OPERATOR_not_equal = "!=" ;
OPERATOR_or = "||" ;
OPERATOR_pipe = "|>" ;
OPERATOR_plus = "+" ;
OPERATOR_range_array = ".." ;
OPERATOR_range_exclusive = "..<" ;
OPERATOR_range_inclusive = "..=" ;
OPERATOR_remainder = "%%" ;
OPERATOR_right_shift_arithmetic = ">>" ;
OPERATOR_right_shift_logical = ">>>" ;

SYM_AMPERSAND = "&" ;
SYM_ARROW_SINGLE = "->" ;
SYM_ARROW_DOUBLE = "=>" ;
SYM_COLON = ":" ;
SYM_COMMA = "," ;
SYM_DOT = "." ;
SYM_ELLIPSIS = "..." ;
SYM_GT = ">" ;
SYM_LBRACE = "{" ;
SYM_LBRACK = "[" ;
SYM_LPAREN = "(" ;
SYM_LT = "<" ;
SYM_QUESTION = "?" ;
SYM_RBRACE = "}" ;
SYM_RBRACK = "]" ;
SYM_RPAREN = ")" ;
SYM_UNDERSCORE = "_" ;

# Definitions

file = package_statement , imports , const_definitions ;

package_statement = KEYWORD_package , identifier ;

imports = import , [ imports ] ;
import = KEYWORD_import , identifier , [ KEYWORD_as , identifier ] , [ KEYWORD_from, literal_string ] ;

const_definitions = ( declaration , const_definition_rhs )+ ;
const_definition_rhs = SYM_COLON , decl_rhs ;
mut_definition_rhs = SYM_EQ , decl_rhs ;
any_definition = declaration , ( const_definition | mut_definition ) ;

declaration = { comment_any } , identifier , SYM_COLON , [ type ]

decl_rhs = expression_with_result
    | function_decl
    | struct_decl
    | union_decl
    | enum_decl
    ;

function_decl = function_signature , function_body ;
struct_decl = KEYWORD_struct , identifier , [ generic_tag ] , SYM_LBRACE , struct_body , SYM_RBRACE ;
union_decl = KEYWORD_union , identifier , [ generic_tag ] , SYM_LBRACE , union_body , SYM_RBRACE ;
enum_decl = KEYWORD_enum , identifier , SYM_LBRACE , enum_body , SYM_RBRACE ;

type = simple_type
    | complicated_type
    ;
type_in_list = simple_type
    | ( SYM_LPAREN , complicated_type , SYM_RPAREN )
    :

simple_type = ( identifier , [ generic_tag ] )
    ;

# Confusing without parentheses in a function return type list
complicated_type = function_signature
    ;

function_signature = KEYWORD_fn , [ generic_tag ], SYM_LPAREN , [ function_parameter_list ] , SYM_RPAREN , [ SYM_ARROW , function_output_list ];
function_parameter_list = ( function_parameter , { SYM_COMMA , function_parameter } )
    ;
function_output_list = KEYWORD_void 
    | simple_type
    | ( SYM_LPAREN , complicated_type , SYM_RPAREN )
    | ( SYM_LPAREN , function_output_in_paren , { SYM_COMMA , function_output_in_paren } , SYM_RPAREN )
    ;

function_output_in_paren = simple_type
    | ( identifier , { SYM_COMMA , identifier } , SYM_COLON , type_in_list ) )
    | ( SYM_LPAREN , complicated_type , SYM_RPAREN )
    ;

function_parameter = identifier , SYM_COLON , type_in_list ) , [ SYM_EQ , default_value ] ;
function_body = SYM_LBRACE, [ expression ]+ , SYM_RBRACE ;
default_value = literal
    | directive
    ;

struct_body = [ struct_member , { SYM_COMMA , struct_member } ] , [ SYM_COMMA ] ;
union_body = [ union_member , { SYM_COMMA , union_member } ] , [ SYM_COMMA ] ;
enum_body = [ enum_member , { SYM_COMMA , enum_member } ] , [ SYM_COMMA ] ;

generic_tag = SYM_LT , type_in_list , { SYM_COMMA , type_in_list } , SYM_GT ;

struct_member = any_definition ;
union_member = identifier ,  [ SYM_LPAREN , identifier , { SYM_COMMA , identifier } , SYM_RPAREN ] ;
enum_member = identifier ;

expression = expression_with_result , [ expression_continuation ]
    | expression_without_result
    ;

expression_continuation = KEYWORD_or_break
    | KEYWORD_or_continue
    | ( KEYWORD_or_else , expression )
    | ( KEYWORD_or_return , [ expression_with_result, [ expression_continuation ] ] )
    ;

expression_with_result = literal
    | arithmetic_expression
    | boolean_expression
    | block
    | ( declaration , [ const_definition_rhs , mut_definition_rhs ] )
    | if_expression
    ;
expression_without_result = for_loop
    | loop
    ;

literal = literal_integer
    | literal_floating_point
    | literal_string
    | literal_char
    | type
    ;

boolean_expression = KEYWORD_if , boolean_expr_lvl_3 , [ KEYWORD_else , boolean_expr_lvl_3 ]
    | boolean_expr_lvl_3 , [ KEYWORD_is_none | KEYWORD_is_some ]
    ; #TODO(ches) parens

boolean_expr_lvl_3 = boolean_expr_lvl_4
    | boolean_expr_lvl_3 , [ OPERATOR_or , boolean_expr_lvl_4 ] ;

boolean_expr_lvl_4 = boolean_expr_lvl_5
    | boolean_expr_lvl_4 , [ OPERATOR_and , boolean_expr_lvl_5 ] ;

boolean_expr_lvl_5 = boolean_expr_lvl_6 , 
    [ ( OPERATOR_equal , boolean_expr_lvl_6 )
    | ( OPERATOR_not_equal , boolean_expr_lvl_6 )
    | ( SYM_LT , boolean_expr_lvl_6 )
    | ( OPERATOR_less_than_or_equal , boolean_expr_lvl_6 )
    | ( SYM_GT , boolean_expr_lvl_6 )
    | ( OPERATOR_greater_than_or_equal , boolean_expr_lvl_6 )
    ] ;

boolean_expr_lvl_6 = boolean_expr_lvl_7 
    | OPERATOR_not , boolean_expr_lvl_7
    ;

boolean_expr_lvl_7 = identifier
    | KEYWORD_true
    | KEYWORD_false
    ;

arithmetic_expression = arithmetic_expr_lvl_6_binary
    ;

arithmetic_expr_lvl_6_binary = arithmetic_expr_lvl_7
    | ( arithmetic_expr_lvl_6_binary , OPERATOR_plus , arithmetic_expr_lvl_7 )
    | ( arithmetic_expr_lvl_6_binary , OPERATOR_minus , arithmetic_expr_lvl_7 )
    | ( arithmetic_expr_lvl_6_binary , OPERATOR_bitwise_or , arithmetic_expr_lvl_7 )
    | ( arithmetic_expr_lvl_6_binary , OPERATOR_assign_bitwise_xor , arithmetic_expr_lvl_7 )
    ;

arithmetic_expr_lvl_7 = arithmetic_expr_lvl_8
    | ( arithmetic_expr_lvl_7 , OPERATOR_multiply , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_divide , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_modulus , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_remainder , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_assign_bitwise_and , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_left_shift , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_right_shift_arithmetic , arithmetic_expr_lvl_8 )
    | ( arithmetic_expr_lvl_7 , OPERATOR_right_shift_logical , arithmetic_expr_lvl_8 )
    ;

arithmetic_expr_lvl_8 = arithmetic_expr_lvl_9
    | ( OPERATOR_plus , arithmetic_expr_lvl_9 )
    | ( OPERATOR_minus , arithmetic_expr_lvl_9 )
    | ( OPERATOR_bitwise_xor , arithmetic_expr_lvl_9 )
    ;

arithmetic_expr_lvl_9 = identifier
    | literal_floating_point
    | literal_integer
    ;

if_expression = KEYWORD_if , SYM_LPAREN, boolean_expression , SYM_RPAREN , block , { else_if_extension } , [ KEYWORD_else , block ] ;
else_if_extension = KEYWORD_else , KEYWORD_if , SYM_LPAREN, boolean_expression , SYM_RPAREN , block ;

for_loop = KEYWORD_for , identifier , { SYM_COMMA , identifier } , KEYWORD_in , ( identifier | range_expression ) , block ;

range_expression = literal_integer , ( OPERATOR_range_exclusive | OPERATOR_range_inclusive ) , literal_integer ;

loop = [ KEYWORD_with with_block ] 
    , KEYWORD_loop , [ directive ] , block 
    , [ KEYWORD_while , SYM_LPAREN, boolean_expression , SYM_RPAREN ]
    ;

with_block = { any_definition } ;
